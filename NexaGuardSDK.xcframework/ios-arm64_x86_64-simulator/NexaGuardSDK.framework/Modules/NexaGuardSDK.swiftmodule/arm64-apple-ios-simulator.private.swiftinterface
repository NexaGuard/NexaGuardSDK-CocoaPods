// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios18.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NexaGuardSDK
import Foundation
import ObjectiveC
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public struct BrandingConfig {
  public let logoUrl: Swift.String?
  public let brandColor: Swift.String?
  public let privacyUrl: Swift.String?
  public let layout: Swift.String?
  public let bannerText: Swift.String?
  public let showRejectButton: Swift.Bool
  public let showCustomizeButton: Swift.Bool
  public let acceptButtonText: Swift.String?
  public let rejectButtonText: Swift.String?
  public let manageButtonText: Swift.String?
  public let customizeLinkId: Swift.String?
  public let selectedVendorIds: [Swift.Int]?
  public let selectedPurposesIds: [Swift.Int]?
  public let vendorListVersion: Swift.Int?
  public let configVersion: Swift.Int?
  public init(logoUrl: Swift.String?, brandColor: Swift.String?, privacyUrl: Swift.String?, layout: Swift.String?, bannerText: Swift.String?, showRejectButton: Swift.Bool, showCustomizeButton: Swift.Bool, acceptButtonText: Swift.String?, rejectButtonText: Swift.String?, manageButtonText: Swift.String?, customizeLinkId: Swift.String?, selectedVendorIds: [Swift.Int]?, selectedPurposesIds: [Swift.Int]?, vendorListVersion: Swift.Int?, configVersion: Swift.Int?)
  public init?(json: [Swift.String : Any])
}
public struct ConsentSelections : Swift.Codable {
  public var purposeIds: [Swift.Int]
  public var vendorIds: [Swift.Int]
  public init(purposeIds: [Swift.Int] = [], vendorIds: [Swift.Int] = [])
  public init?(json: [Swift.String : Any])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PurposeModel : Swift.Codable {
  public let id: Swift.Int
  public let name: Swift.String
  public let description: Swift.String?
  public init(id: Swift.Int, name: Swift.String, description: Swift.String? = nil)
  public static func parse(from gvl: [Swift.String : Any]) -> [NexaGuardSDK.PurposeModel]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VendorModel : Swift.Codable {
  public let id: Swift.Int
  public let name: Swift.String
  public let policyUrl: Swift.String?
  public let purposes: [Swift.Int]
  public let legIntPurposes: [Swift.Int]
  public var legitimateInterests: [Swift.Int] {
    get
  }
  public init(id: Swift.Int, name: Swift.String, policyUrl: Swift.String? = nil, purposes: [Swift.Int] = [], legIntPurposes: [Swift.Int] = [])
  public static func parse(from gvl: [Swift.String : Any], config: NexaGuardSDK.BrandingConfig) -> [NexaGuardSDK.VendorModel]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ConsentStorage {
  public static func saveConsent(_ consented: Swift.Bool, tcString: Swift.String?)
  public static func getConsent() -> Swift.Bool
  public static func getTCString() -> Swift.String?
  public static func saveGVL(_ json: [Swift.String : Any])
  public static func loadGVL() -> [Swift.String : Any]?
  public static func getConfigVersion() -> Swift.Int
  public static func setConfigVersion(_ version: Swift.Int)
  public static func getVendorListVersion() -> Swift.Int
  public static func setVendorListVersion(_ version: Swift.Int)
  public static func resetConsent()
  @objc deinit
}
public protocol SecondLayerDelegate : AnyObject {
  func didAcceptAll()
  func didSaveSelections(purposes: [Swift.Int], vendors: [Swift.Int])
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SecondLayerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public init(brandingConfig: NexaGuardSDK.BrandingConfig, purposes: [NexaGuardSDK.PurposeModel], vendors: [NexaGuardSDK.VendorModel], rawVendors: [[Swift.String : Any]], gvl: [Swift.String : Any], initialSelections: NexaGuardSDK.ConsentSelections?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension NexaGuardSDK.SecondLayerViewController : UIKit.UIPageViewControllerDataSource, UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func pageViewController(_ pvc: UIKit.UIPageViewController, viewControllerBefore vc: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func pageViewController(_ pvc: UIKit.UIPageViewController, viewControllerAfter vc: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func pageViewController(_ pvc: UIKit.UIPageViewController, didFinishAnimating _: Swift.Bool, previousViewControllers _: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
public class BitWriter {
  public init()
  public func write(bit: Swift.Bool)
  public func write(bits: [Swift.Bool])
  public func write(number: Swift.UInt, bitCount: Swift.Int)
  public func write(numbers: [Swift.UInt], bitCount: Swift.Int)
  public func data() -> Foundation.Data
  public func count() -> Swift.Int
  @objc deinit
}
public class BitReader {
  public init(data: Foundation.Data)
  public func readBit() -> Swift.Bool?
  public func readBits(_ n: Swift.Int) -> [Swift.Bool]?
  public func readUInt(_ n: Swift.Int) -> Swift.UInt?
  public func skip(_ n: Swift.Int)
  public func remainingBits() -> Swift.Int
  @objc deinit
}
extension Foundation.Data {
  public func base64URLEncodedString() -> Swift.String
  public static func fromBase64Url(_ str: Swift.String) -> Foundation.Data?
}
public enum NXGCMPUtils {
  public static func encodeTCString(purposeConsents: [Swift.Int], purposeLegitimateInterests: [Swift.Int], specialFeatureOptins: [Swift.Int], vendorConsents: [Swift.Int], vendorLegitimateInterests: [Swift.Int], gvlVendorIds: [Swift.Int], cmpId: Swift.Int = 471, cmpVersion: Swift.Int = 1, consentScreen: Swift.Int = 0, consentLanguage: Swift.String = "EN", vendorListVersion: Swift.Int = 1, policyVersion: Swift.Int = 1, isServiceSpecific: Swift.Bool = false, useNonStandardStacks: Swift.Bool = false, purposeOneTreatment: Swift.Bool = false, publisherCC: Swift.String = "US") -> Swift.String
  public static func encodeDisclosedVendorsSegment(allowedVendorIds: [Swift.Int], gvlVendorIds: [Swift.Int]) -> Swift.String
  public static func decodeTCString(_ tc: Swift.String) -> [Swift.String : Any]?
  public static func encodeTCString(purposes: [Swift.Int], vendors: [Swift.Int], gvlVendorIds: [Swift.Int]) -> Swift.String
  public static func csvString(from ids: [Swift.Int]) -> Swift.String
  public static func parseCSV(_ csv: Swift.String) -> [Swift.Int]
  public static func allPurposesGiven(user: [Swift.Int], required: [Swift.Int]) -> Swift.Bool
}
public enum NxgLogLevel : Swift.Int {
  case verbose, debug, info, warning, error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class NxgLog {
  public static var enabled: Swift.Bool
  public static var tagPrefix: Swift.String
  public static func v(_ tag: Swift.String, _ msg: Swift.String, _ error: (any Swift.Error)? = nil)
  public static func d(_ tag: Swift.String, _ msg: Swift.String, _ error: (any Swift.Error)? = nil)
  public static func i(_ tag: Swift.String, _ msg: Swift.String, _ error: (any Swift.Error)? = nil)
  public static func w(_ tag: Swift.String, _ msg: Swift.String, _ error: (any Swift.Error)? = nil)
  public static func e(_ tag: Swift.String, _ msg: Swift.String, _ error: (any Swift.Error)? = nil)
  @objc deinit
}
public enum ConsentAction : Swift.Equatable {
  case acceptAll
  case rejectAll
  case customize(purposes: [Swift.Int], vendors: [Swift.Int])
  public static func == (lhs: NexaGuardSDK.ConsentAction, rhs: NexaGuardSDK.ConsentAction) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class NexaGuardCMP {
  public static let shared: NexaGuardSDK.NexaGuardCMP
  public func initialize(settingsId: Swift.String, completion: (() -> Swift.Void)? = nil)
  public func acceptAllSelections()
  public func rejectAllSelections()
  public func applyCustomSelections(purposes: [Swift.Int], vendors: [Swift.Int])
  public func makeTCStringRejectAll() -> Swift.String?
  public func updateGoogleConsentModeFromTCString(_ tcString: Swift.String)
  public func showBanner(force: Swift.Bool = false)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NXGAPIServer {
  public static func fetchBannerConfigAndMaybeGVL(settingsId: Swift.String, completion: @escaping (NexaGuardSDK.BrandingConfig?, [Swift.String : Any]?) -> Swift.Void)
  public static func fetchBrandingConfig(settingsId: Swift.String, completion: @escaping (NexaGuardSDK.BrandingConfig?) -> Swift.Void)
  public static func fetchGVL(completion: @escaping ([Swift.String : Any]?) -> Swift.Void)
  public static func initializeCache()
  public static func clearCache()
  @objc deinit
}
extension NexaGuardSDK.NxgLogLevel : Swift.Equatable {}
extension NexaGuardSDK.NxgLogLevel : Swift.Hashable {}
extension NexaGuardSDK.NxgLogLevel : Swift.RawRepresentable {}
