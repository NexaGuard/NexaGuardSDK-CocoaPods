name: Release iOS SDK to CocoaPods

on:
  push:
    branches: [ "main" ]
    paths:
    - "NexaGuardSDK.xcframework/**"
    - "NexaGuardSDK.podspec"
    - ".github/workflows/publish-pod.yml" # edits to this file re‑trigger the workflow
  workflow_dispatch: {} # manual “Run workflow” button

# ──────────────────────────────────────────────────────────────
# Prevent concurrent runs on the same ref (avoids tag/branch races)
# ──────────────────────────────────────────────────────────────
concurrency:
  group: ios-pod-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: macos-13 # macOS runner gives codesign & Xcode CLI

    env:
      POD_TRUNK_TOKEN: ${{ secrets.POD_TRUNK_TOKEN }}
      GIT_USER_NAME: NexaGuard-CI
      GIT_USER_EMAIL: ios@nexaguard.com

    steps:
    # 1. Checkout full history (tags included)
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # need full history for tag queries

    # 2. Strip existing codesign blobs and re‑sign the slice we ship
    - name: Strip _CodeSignature & re‑sign
      run: |
        echo "▶︎ Cleaning signatures"
        rm -rf build && mkdir build
        cp -R NexaGuardSDK.xcframework build/

        cd build
        # remove *all* stale signature folders
        find NexaGuardSDK.xcframework -name _CodeSignature -type d -exec rm -rf {} +
        cd ..

        # replace the xcframework in repo root
        rm -rf NexaGuardSDK.xcframework
        mv build/NexaGuardSDK.xcframework .

    # 3. Auto‑bump the podspec version until it’s unique
    - name: Auto‑bump podspec version
      id: bump
      run: |
        CURRENT=$(grep -E "s.version.*=" NexaGuardSDK.podspec | awk -F"'" '{print $2}')
        NEW="$CURRENT"

        # keep incrementing patch until the tag is free
        while git rev-parse "$NEW" >/dev/null 2>&1; do
          IFS='.' read -r MAJ MIN PAT <<< "$NEW"
          NEW="${MAJ}.${MIN}.$((PAT+1))"
        done

        if [ "$NEW" != "$CURRENT" ]; then
          sed -i '' "s/s.version[[:space:]]*=.*/s.version          = '$NEW'/" NexaGuardSDK.podspec
        fi

        echo "Publishing as version : $NEW"
        echo "newver=$NEW" >> "$GITHUB_OUTPUT"

    # 4. Commit, tag (force‑update if CI re‑runs) & atomic push
    - name: Commit, tag & push
      run: |
        git config user.name  "$GIT_USER_NAME"
        git config user.email "$GIT_USER_EMAIL"

        git add NexaGuardSDK.xcframework NexaGuardSDK.podspec
        git commit -m "iOS ${{ steps.bump.outputs.newver }} – automated release 🚀" \
          || echo "Nothing to commit"

        # always replay on top of the latest main in case someone just pushed
        git pull --rebase origin main

        # tag may already exist – force‑update it safely
        git tag -f ${{ steps.bump.outputs.newver }}

        # one atomic push for branch + tag, protected by --force-with-lease
        git push --atomic --force-with-lease origin HEAD:main \
                   refs/tags/${{ steps.bump.outputs.newver }}

    # 5. Publish to CocoaPods
    - name: Publish to CocoaPods Trunk
      run: |
        echo "$POD_TRUNK_TOKEN" \
          | pod trunk register ios@nexaguard.com 'CI Bot' --description='CI' || true
        pod trunk push NexaGuardSDK.podspec --allow-warnings --skip-tests --verbose
